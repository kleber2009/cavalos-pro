#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Algoritmo Melhorado de An√°lise de Cavalos - Vers√£o 2.0
Baseado nos aprendizados da corrida de Southwell

Melhorias implementadas:
1. An√°lise de todos os cavalos, n√£o apenas favoritos
2. Maior peso para forma recente
3. Identifica√ß√£o de "dark horses"
4. Sistema de alertas para outsiders
5. An√°lise de value bets
"""

import json
import math
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

class AnalisadorCavalosV2:
    def __init__(self):
        self.peso_forma_recente = 0.4  # Aumentado de 0.3
        self.peso_joquei = 0.25        # Aumentado de 0.2
        self.peso_historico = 0.2      # Diminu√≠do de 0.3
        self.peso_condicoes = 0.15     # Novo fator
        
        # Novos par√¢metros para identificar outsiders
        self.threshold_dark_horse = 7.0  # Score m√≠nimo para dark horse
        self.odds_max_favorito = 4.0     # Odds m√°ximas para ser considerado favorito
        self.odds_min_outsider = 6.0     # Odds m√≠nimas para ser considerado outsider
    
    def calcular_score_melhorado(self, cavalo: Dict) -> Dict:
        """
        Calcula score melhorado baseado nos aprendizados
        """
        score_components = {
            'forma_recente': 0,
            'joquei': 0,
            'historico': 0,
            'condicoes': 0,
            'bonus_outsider': 0
        }
        
        # 1. FORMA RECENTE (peso aumentado)
        score_components['forma_recente'] = self._analisar_forma_recente(cavalo)
        
        # 2. AN√ÅLISE DE J√ìQUEI (peso aumentado)
        score_components['joquei'] = self._analisar_joquei(cavalo)
        
        # 3. HIST√ìRICO GERAL (peso diminu√≠do)
        score_components['historico'] = self._analisar_historico(cavalo)
        
        # 4. CONDI√á√ïES ESPEC√çFICAS (novo)
        score_components['condicoes'] = self._analisar_condicoes(cavalo)
        
        # 5. B√îNUS PARA OUTSIDERS COM POTENCIAL (novo)
        score_components['bonus_outsider'] = self._calcular_bonus_outsider(cavalo)
        
        # Calcular score final
        score_final = (
            score_components['forma_recente'] * self.peso_forma_recente +
            score_components['joquei'] * self.peso_joquei +
            score_components['historico'] * self.peso_historico +
            score_components['condicoes'] * self.peso_condicoes +
            score_components['bonus_outsider']
        )
        
        return {
            'score_final': round(score_final, 2),
            'components': score_components,
            'categoria': self._classificar_cavalo(cavalo, score_final),
            'recomendacao': self._gerar_recomendacao_melhorada(cavalo, score_final)
        }
    
    def _analisar_forma_recente(self, cavalo: Dict) -> float:
        """
        An√°lise mais detalhada da forma recente (√∫ltimas 3-5 corridas)
        """
        score = 0
        
        # Simular an√°lise de forma recente
        ultimas_posicoes = cavalo.get('ultimas_posicoes', [])
        if not ultimas_posicoes:
            return 5.0  # Score neutro se n√£o h√° dados
        
        # Dar mais peso √†s corridas mais recentes
        pesos = [0.5, 0.3, 0.2]  # √öltima corrida tem peso 50%
        
        for i, posicao in enumerate(ultimas_posicoes[:3]):
            if i < len(pesos):
                # Converter posi√ß√£o em score (1¬∫ = 10, 2¬∫ = 8, etc.)
                score_corrida = max(0, 11 - posicao)
                score += score_corrida * pesos[i]
        
        # B√¥nus por consist√™ncia
        if len(ultimas_posicoes) >= 3:
            posicoes_top3 = sum(1 for p in ultimas_posicoes[:3] if p <= 3)
            if posicoes_top3 >= 2:
                score += 1.0  # B√¥nus por consist√™ncia
        
        return min(score, 10.0)
    
    def _analisar_joquei(self, cavalo: Dict) -> float:
        """
        An√°lise melhorada do j√≥quei
        """
        joquei = cavalo.get('joquei', '')
        
        # Simular dados de j√≥quei
        joqueis_top = {
            'ryan moore': 9.5,
            'frankie dettori': 9.3,
            'william buick': 9.0,
            'oisin murphy': 8.8,
            'tom marquand': 8.5
        }
        
        score_base = joqueis_top.get(joquei.lower(), 6.0)
        
        # B√¥nus por parceria cavalo-j√≥quei
        if cavalo.get('parceria_joquei_vitorias', 0) > 0:
            score_base += 0.5
        
        return score_base
    
    def _analisar_historico(self, cavalo: Dict) -> float:
        """
        An√°lise do hist√≥rico geral (peso reduzido)
        """
        vitorias = cavalo.get('vitorias', 0)
        corridas = cavalo.get('corridas_total', 1)
        
        taxa_vitoria = vitorias / corridas if corridas > 0 else 0
        
        # Score baseado na taxa de vit√≥ria
        score = taxa_vitoria * 10
        
        # Ajuste por experi√™ncia
        if corridas < 5:
            score *= 0.8  # Penalizar inexperi√™ncia
        elif corridas > 20:
            score *= 1.1  # B√¥nus por experi√™ncia
        
        return min(score, 10.0)
    
    def _analisar_condicoes(self, cavalo: Dict) -> float:
        """
        Novo: An√°lise de condi√ß√µes espec√≠ficas
        """
        score = 5.0  # Score neutro
        
        # Tipo de pista
        tipo_pista = cavalo.get('tipo_pista_preferida', 'turf')
        tipo_corrida = cavalo.get('tipo_pista_corrida', 'turf')
        
        if tipo_pista == tipo_corrida:
            score += 1.5
        
        # Dist√¢ncia
        distancia_preferida = cavalo.get('distancia_preferida', 1600)
        distancia_corrida = cavalo.get('distancia_corrida', 1600)
        
        diferenca_distancia = abs(distancia_preferida - distancia_corrida)
        if diferenca_distancia <= 200:
            score += 1.0
        elif diferenca_distancia <= 400:
            score += 0.5
        
        # Condi√ß√µes clim√°ticas
        if cavalo.get('performance_chuva', False) and cavalo.get('previsao_chuva', False):
            score += 0.5
        
        return min(score, 10.0)
    
    def _calcular_bonus_outsider(self, cavalo: Dict) -> float:
        """
        Novo: B√¥nus para identificar dark horses
        """
        odds = cavalo.get('odds', 5.0)
        
        # S√≥ aplicar b√¥nus para outsiders (odds > 6.0)
        if odds < self.odds_min_outsider:
            return 0
        
        # Fatores que podem indicar um dark horse
        bonus = 0
        
        # J√≥quei experiente em cavalo com odds altas
        if cavalo.get('joquei_rating', 0) > 7.5:
            bonus += 0.5
        
        # Melhoria recente de forma
        ultimas_posicoes = cavalo.get('ultimas_posicoes', [])
        if len(ultimas_posicoes) >= 2:
            if ultimas_posicoes[0] < ultimas_posicoes[1]:  # Melhorou na √∫ltima
                bonus += 0.3
        
        # Primeira vez com novo j√≥quei top
        if cavalo.get('novo_joquei_top', False):
            bonus += 0.4
        
        # Volta ap√≥s descanso
        if cavalo.get('dias_descanso', 0) > 30:
            bonus += 0.2
        
        return bonus
    
    def _classificar_cavalo(self, cavalo: Dict, score: float) -> str:
        """
        Classifica√ß√£o melhorada dos cavalos
        """
        odds = cavalo.get('odds', 5.0)
        
        if score >= 8.5:
            if odds <= self.odds_max_favorito:
                return 'FAVORITO_FORTE'
            else:
                return 'DARK_HORSE'  # Alto score mas odds altas
        elif score >= 7.5:
            if odds <= self.odds_max_favorito:
                return 'FAVORITO'
            else:
                return 'VALUE_BET'  # Bom score com odds interessantes
        elif score >= 6.5:
            return 'COMPETITIVO'
        elif score >= 5.5:
            return 'OUTSIDER_POTENCIAL'
        else:
            return 'EVITAR'
    
    def _gerar_recomendacao_melhorada(self, cavalo: Dict, score: float) -> str:
        """
        Recomenda√ß√µes mais espec√≠ficas
        """
        categoria = self._classificar_cavalo(cavalo, score)
        odds = cavalo.get('odds', 5.0)
        
        recomendacoes = {
            'FAVORITO_FORTE': f'üî• APOSTA FORTE - Score {score} com odds {odds}',
            'DARK_HORSE': f'üíé DARK HORSE - Alto potencial com odds {odds}!',
            'FAVORITO': f'‚úÖ APOSTA SEGURA - Score {score}',
            'VALUE_BET': f'üí∞ VALUE BET - Bom score {score} com odds {odds}',
            'COMPETITIVO': f'‚öñÔ∏è COMPETITIVO - Pode surpreender',
            'OUTSIDER_POTENCIAL': f'üéØ OUTSIDER - Para apostas pequenas',
            'EVITAR': f'‚ùå EVITAR - Score baixo {score}'
        }
        
        return recomendacoes.get(categoria, 'An√°lise incompleta')
    
    def analisar_corrida_completa(self, cavalos: List[Dict]) -> Dict:
        """
        An√°lise completa de todos os cavalos da corrida
        """
        resultados = []
        
        for cavalo in cavalos:
            analise = self.calcular_score_melhorado(cavalo)
            cavalo_completo = {
                **cavalo,
                **analise
            }
            resultados.append(cavalo_completo)
        
        # Ordenar por score
        resultados.sort(key=lambda x: x['score_final'], reverse=True)
        
        # Identificar diferentes categorias
        favoritos = [c for c in resultados if c['categoria'] in ['FAVORITO_FORTE', 'FAVORITO']]
        dark_horses = [c for c in resultados if c['categoria'] == 'DARK_HORSE']
        value_bets = [c for c in resultados if c['categoria'] == 'VALUE_BET']
        
        return {
            'todos_cavalos': resultados,
            'top_3_score': resultados[:3],
            'favoritos': favoritos,
            'dark_horses': dark_horses,
            'value_bets': value_bets,
            'recomendacao_principal': self._gerar_estrategia_apostas(resultados),
            'timestamp': datetime.now().isoformat()
        }
    
    def _gerar_estrategia_apostas(self, cavalos: List[Dict]) -> str:
        """
        Gera estrat√©gia de apostas baseada na an√°lise
        """
        if not cavalos:
            return "Sem dados suficientes para estrat√©gia"
        
        estrategia = []
        
        # Aposta principal
        melhor = cavalos[0]
        estrategia.append(f"üéØ APOSTA PRINCIPAL: {melhor['nome']} (Score: {melhor['score_final']})")
        
        # Dark horses
        dark_horses = [c for c in cavalos if c['categoria'] == 'DARK_HORSE']
        if dark_horses:
            estrategia.append(f"üíé DARK HORSE: {dark_horses[0]['nome']} - ATEN√á√ÉO ESPECIAL!")
        
        # Value bets
        value_bets = [c for c in cavalos if c['categoria'] == 'VALUE_BET']
        if value_bets:
            estrategia.append(f"üí∞ VALUE BET: {value_bets[0]['nome']} - Odds interessantes")
        
        return " | ".join(estrategia)

# Exemplo de uso
if __name__ == "__main__":
    analisador = AnalisadorCavalosV2()
    
    # Dados de exemplo baseados na corrida de Southwell
    cavalos_exemplo = [
        {
            'nome': 'Bella Delizia',
            'odds': 3.5,
            'joquei': 'ryan moore',
            'ultimas_posicoes': [2, 1, 3],
            'vitorias': 5,
            'corridas_total': 12
        },
        {
            'nome': 'Hypnotysed',
            'odds': 8.0,  # Era outsider
            'joquei': 'tom marquand',
            'ultimas_posicoes': [3, 2, 1],  # Forma melhorando
            'vitorias': 3,
            'corridas_total': 8,
            'novo_joquei_top': True  # Fator que perdemos
        },
        {
            'nome': 'Yellow Diamonds',
            'odds': 12.0,  # Outsider maior
            'joquei': 'oisin murphy',
            'ultimas_posicoes': [4, 3, 2],  # Consistente melhoria
            'vitorias': 2,
            'corridas_total': 6,
            'dias_descanso': 45  # Volta ap√≥s descanso
        }
    ]
    
    resultado = analisador.analisar_corrida_completa(cavalos_exemplo)
    
    print("üîç AN√ÅLISE COM ALGORITMO MELHORADO:")
    print("=" * 50)
    
    for cavalo in resultado['todos_cavalos']:
        print(f"\nüêé {cavalo['nome']}:")
        print(f"   Score: {cavalo['score_final']} | Categoria: {cavalo['categoria']}")
        print(f"   {cavalo['recomendacao']}")
    
    print(f"\nüéØ ESTRAT√âGIA: {resultado['recomendacao_principal']}")
    
    if resultado['dark_horses']:
        print(f"\nüíé DARK HORSES IDENTIFICADOS: {len(resultado['dark_horses'])}")
        for dh in resultado['dark_horses']:
            print(f"   - {dh['nome']} (Score: {dh['score_final']}, Odds: {dh['odds']})")